(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{286:function(e,r,t){e.exports=t.p+"assets/img/http_referer.8ca89bea.png"},416:function(e,r,t){"use strict";t.r(r);var a=t(14),s=Object(a.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("对于网站的运营人员来说，流量来源分析是一个非常重要的工作。你一定很关心用户到底是从什么地方来的，是通过搜索引擎主动搜索进入的？还是通过点击微信朋友圈转发的文章链接进入的？还是通过某个广告推广链接进入的？")]),e._v(" "),r("h1",{attrs:{id:"referer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referer"}},[e._v("#")]),e._v(" referer")]),e._v(" "),r("p",[e._v("说到来源分析，那么自然要提到HTTP的一个header："),r("code",[e._v("referer")]),e._v("。")]),e._v(" "),r("p",[e._v("根据规范，referer记录的是当前请求是从哪个页面发起的，比如当你在某个页面中点击一个a标签时，可以看到发出的HTTP请求头部就带有当前页面的url信息。")]),e._v(" "),r("p",[r("img",{attrs:{src:t(286),alt:"http referer"}})]),e._v(" "),r("p",[e._v("referer是由user agent（也就是浏览器）在发起HTTP请求时自动加上的，而且几乎所有浏览器发起的HTTP请求头里都带有这个header，甚至是在浏览器的隐私模式下也是有referer的。")]),e._v(" "),r("p",[e._v("当然如果你是直接在地址栏输入一个url打开一个页面，那么这个url的GET请求是没有referer的，不过还有一些其他情况会导致没有referer，后面会详细讲到。")]),e._v(" "),r("p",[e._v("现在有一个小问题考考你，看你对referer的理解，假设在"),r("code",[e._v("http://example.com/")]),e._v("下有如下a链接：")]),e._v(" "),r("div",{staticClass:"language-html extra-class"},[r("pre",{pre:!0,attrs:{class:"language-html"}},[r("code",[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("a")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("href")]),r("span",{pre:!0,attrs:{class:"token attr-value"}},[r("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("http://example.com/1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("click"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("a")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),r("p",[e._v("访问这个链接server端会返回一个301跳转，Location为"),r("code",[e._v("http://example.com/2")]),e._v("，那么最终向"),r("code",[e._v("http://example.com/2")]),e._v("发出请求的referer会是什么呢？是"),r("code",[e._v("http://example.com/")]),e._v("还是"),r("code",[e._v("http://example.com/1")]),e._v("呢？")]),e._v(" "),r("p",[e._v("分析整个流程可知，即使经过了301跳转，最后的请求仍然是在"),r("code",[e._v("http://example.com/")]),e._v("发出的，所以referer自然是"),r("code",[e._v("http://example.com")]),e._v("。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("http://example.com/               server\n         |             /1            |\n         |--------------------------\x3e|\n         |                           |\n         |         301 to /2         |\n         |<--------------------------|\n         |                           |\n         |             /2            |\n         |--------------------------\x3e|\n")])])]),r("p",[e._v("你可以通过javascript的"),r("code",[e._v("document.referer")]),e._v("在前端获取到当前页面的referer信息。")]),e._v(" "),r("h1",{attrs:{id:"referer的用途"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referer的用途"}},[e._v("#")]),e._v(" referer的用途")]),e._v(" "),r("p",[e._v("referer被发明出来的目的就是做流量来源分析，实际上它可以做很多事情。")]),e._v(" "),r("ol",[r("li",[e._v("流量分析")])]),e._v(" "),r("p",[e._v("这个就不多说了，本职工作")]),e._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[e._v("图片防盗链、音视频防下载")])]),e._v(" "),r("p",[e._v("后端服务器检查图片、音视频资源的HTTP请求的referer，如果与站点url不同域，说明请求来自其他站点，此时返回一个错误信息。")]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[e._v("防止CSRF攻击")])]),e._v(" "),r("p",[e._v("CSRF攻击是诱导用户去点击恶意构造的链接，借用户的手进行一些操作，这种链接通常来自一些钓鱼页面，发出的请求也自然带有钓鱼页面的referer（或者没有referer），服务端可以通过检测referer来发现和组织非法的请求。")]),e._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[e._v("实现“后退”功能")])]),e._v(" "),r("p",[r("code",[e._v("history.back()")]),e._v("的一个局限性是历史记录仅对当前页面session有效，如果页面跳转到一个新窗口，那么在新窗口里是无法用"),r("code",[e._v("history.back()")]),e._v("回去的，那么此时就可以用referer实现后退功能了。")]),e._v(" "),r("h1",{attrs:{id:"伪造referer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#伪造referer"}},[e._v("#")]),e._v(" 伪造referer")]),e._v(" "),r("p",[e._v("因为referer是客户端决定的，所以从服务器的角度看，referer的真实性是不可靠的。比如你可以用curl命令添加referer：")]),e._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# -e 代表设置referer，-v打印header")]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://www.baidu.com "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-e")]),e._v(" https://blog.lisunyang.com "),r("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v("\n")])])]),r("p",[e._v("可以看到referer已经被设置成"),r("code",[e._v("https://blog.lishunyang.com")]),e._v("了:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("> GET / HTTP/1.1\n> Host: www.baidu.com\n> User-Agent: curl/7.58.0\n> Accept: */*\n> Referer: https://blog.lisunyang.com\n")])])]),r("p",[e._v("所以对于后端爬虫来说，referer的限制通通都是失效的。")]),e._v(" "),r("p",[e._v("看到这里你也许会思考：在前端构造ajax请求的时候也指定referer，岂不是可以为所欲为了？很可惜，浏览器早就料到了有人会这么干，所以所有请求在发出的时候，浏览器会按照正常规则覆盖referer头部。所以这种方式是不可行的。")]),e._v(" "),r("h1",{attrs:{id:"referrer-policy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referrer-policy"}},[e._v("#")]),e._v(" Referrer-Policy")]),e._v(" "),r("blockquote",[r("p",[e._v("Referrer Policy这里的Referrer其实是一个错误的拼写，但用得太多，所以被沿用下来了。。")])]),e._v(" "),r("p",[e._v("referer主要的安全风险是信息泄露，当url包含有一些敏感信息时，这些敏感信息就可能会随着referer被泄露到外部。")]),e._v(" "),r("p",[e._v("比如我们在重置密码的时候，通常是通过"),r("a",{attrs:{href:"https://www.jianshu.com/p/8f7009456abc",target:"_blank",rel:"noopener noreferrer"}},[e._v("bearer token"),r("OutboundLink")],1),e._v("进行身份验证的，此时token是放在url中的：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("https://example.com/reset_password?access_token=65c36cfa-c1a9-44dd-bbe4-797571a1a341\n")])])]),r("p",[e._v("当我们打开这个页面时，后续所有请求的referer都会带上这个url。万一这个token不是一次性的而是在一定时间内有效，那这个就很可能造成安全风险。")]),e._v(" "),r("p",[e._v("于是W3C引入了Referrer-Policy的规范，用来指导客户端如何发送referer。可能的值有：")]),e._v(" "),r("ol",[r("li",[e._v("no-referer")]),e._v(" "),r("li",[e._v("no-referer-when-downgrade（默认值，当HTTPS跳转到HTTP时不带referer）")]),e._v(" "),r("li",[e._v("same-origin")]),e._v(" "),r("li",[e._v("origin")]),e._v(" "),r("li",[e._v("strict-origin")]),e._v(" "),r("li",[e._v("origin-when-cross-origin")]),e._v(" "),r("li",[e._v("strict-origin-when-cross-origin")]),e._v(" "),r("li",[e._v("unsafe-url")]),e._v(" "),r("li",[e._v("empty")])]),e._v(" "),r("p",[e._v("具体的含义和细节这里就不罗嗦了，网上的资料到处都是。")]),e._v(" "),r("blockquote",[r("p",[e._v("说句题外话，你有没有注意到这个规范是W3C组织确定的？W3C和IETF（RFC）的区别在"),r("a",{attrs:{href:"https://softwareengineering.stackexchange.com/questions/109517/how-is-ietf-different-from-w3c",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),r("OutboundLink")],1)])]),e._v(" "),r("p",[e._v("怎么使用呢？有以下几种使用方式：")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("作为HTTP头部引入\n例如："),r("code",[e._v("Referrer-Policy: no-referrer")])])]),e._v(" "),r("li",[r("p",[e._v("由html的meta标签引入\n例如："),r("code",[e._v('<meta name="referrer" content="origin">')])])]),e._v(" "),r("li",[r("p",[e._v("作为html标签的refererpolicy属性引入，可以用在a、area、img、iframe、link标签\n例如："),r("code",[e._v('<a href="http://example.com" referrerpolicy="origin">')])])]),e._v(" "),r("li",[r("p",[e._v("从context中继承\n例如：iframe的Referrer-Policy继承自浏览器context或blog URL")])])]),e._v(" "),r("p",[e._v("再具体的细节就不多讲了。")]),e._v(" "),r("h1",{attrs:{id:"referer就够了吗"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#referer就够了吗"}},[e._v("#")]),e._v(" referer就够了吗？")]),e._v(" "),r("p",[e._v("现在再说回流量来源分析。有了referer，我们就可以做来源分析了，但referer还是有一些小缺点。比如：")]),e._v(" "),r("ol",[r("li",[e._v("首次打开链接没有referer，这种场景的来源信息无法通过referer获取，比如打开邮件中的链接。")]),e._v(" "),r("li",[e._v("referer只能统计从网站外部“进入”网站的行为，而网站内部的跳转行为是无法通过referer进行统计的。比如从A渠道进来的用户会在网站内多次点击，B渠道来的用户进入网站后立刻就走了，这个信息无法用referer分辨。")]),e._v(" "),r("li",[e._v("referer会受Referrer-Policy的影响，容易丢失。")])]),e._v(" "),r("p",[e._v("怎么办呢？于是就有了UTM参数。")]),e._v(" "),r("h1",{attrs:{id:"utm参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#utm参数"}},[e._v("#")]),e._v(" UTM参数")]),e._v(" "),r("p",[e._v("有时候你会看到一些url的query部分带有utm_开头的部分，例如：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("https://www.example.com/page?utm_source=facebook.com\n")])])]),r("p",[e._v("url里面的utm_source、utm_campaign等utm_开头的部分，就叫做UTM参数（UTM Parameters），首先申明，UTM参数不是必须的。")]),e._v(" "),r("p",[e._v("UTM的缩写是Urchin Tracking Module，这个名字来源自一个叫Urchin的公司，他们最早开始使用这种技术进行来源分析，后来Urchin公司被Google收购，但UTM这个名字渐渐普及并被沿用了下来。主流的流量分析工具服务都可以识别UTM参数，比如Google Ananysis、GrowingIO等等。")]),e._v(" "),r("p",[e._v("比较常用的有以下几种")]),e._v(" "),r("ol",[r("li",[e._v("utm_source：表示流量来源，比如是搜索引擎、渠道名或者什么来源")]),e._v(" "),r("li",[e._v("utm_medium：表示这个链接的媒介，比如是banner图，还是文本链接")]),e._v(" "),r("li",[e._v("utm_campaign：广告名称，比如这次活动的名字是什么")]),e._v(" "),r("li",[e._v("utm_term：关键字")])]),e._v(" "),r("p",[e._v("如你所见，utm参数就是作为url的query存在，而且utm参数是人为设定的。比如我在百度上购买了广告，投放的链接地址是"),r("code",[e._v("https://blog.lishunyang.com/?utm_source=baidu")]),e._v("，那么当用户通过点击这个链接进入，GoogleAnalysis就可以帮我统计出这是来自于百度搜索引擎的流量。")]),e._v(" "),r("p",[e._v("让我们看看utm参数如何解决之前所说的referer的问题：")]),e._v(" "),r("ol",[r("li",[e._v("首次打开链接不受影响，"),r("strong",[e._v("因为UTM参数是在url上的")])]),e._v(" "),r("li",[e._v("站点内跳转也可以保留来源信息，"),r("strong",[e._v("因为UTM参数是在url上的")])]),e._v(" "),r("li",[e._v("不受Referer-Policy影响，"),r("strong",[e._v("因为UTM参数是在url上的")])])]),e._v(" "),r("p",[e._v("太棒了，简直完美，但别高兴太早，UTM参数最大的问题也同样是因为"),r("strong",[e._v("因为UTM参数是在url上的")]),e._v("，准确地说是存在于url的query部分，而url的query是很容易丢失的。比如下面两个链接，点击第一个链接UTM就丢失了，只能按第二种写法写。")]),e._v(" "),r("div",{staticClass:"language-html extra-class"},[r("pre",{pre:!0,attrs:{class:"language-html"}},[r("code",[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("a")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("href")]),r("span",{pre:!0,attrs:{class:"token attr-value"}},[r("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("/info"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("info"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("a")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("a")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("href")]),r("span",{pre:!0,attrs:{class:"token attr-value"}},[r("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("/info?utm_source=baidu"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("info"),r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token tag"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("a")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])]),r("p",[e._v("这对web开发来讲是一个非常严峻的考验，你必须小心翼翼地构造每一个可能的链接，以确保query能够始终保持。这不是一个很稳妥的做法。所以有些人也会把UTM参数放在cookie中或者LocalStorage以便持久保存，但这又引入了cookie和LocalStorage何时失效的问题。比如当我跳转到一个不带UTM参数的链接时，我到底是应该使用cookie里的UTM信息呢？还是应该认为cookie里的UTM已经失效了，本次链接确实没有UTM参数？")]),e._v(" "),r("h1",{attrs:{id:"utm参数的维护"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#utm参数的维护"}},[e._v("#")]),e._v(" UTM参数的维护")]),e._v(" "),r("p",[e._v("碰巧前一段时间在帮市场部开发页面的时候就遇到了这个问题（这也正是这篇博客的由来），市场部的同事总是抱怨新开发的官网活动页经常性会丢失"),r("code",[e._v("utm_source")]),e._v("，因为开发人员在写页面的时候忘记处理这个事情，新写的跳转地址很容易就把query搞丢了。")]),e._v(" "),r("p",[e._v("怎么办呢？")]),e._v(" "),r("p",[e._v("这里给出我的解决办法，在页面加载时执行一小段js代码，方法非常简单，伪代码如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("function utm_restore() {\n  if (页面url没有UTM参数 && referer有UTM参数) {\n    提取referer的UTM参数并加入页面的url中\n  }\n}\n")])])]),r("p",[e._v("相当于是referer和query双保险，确保UTM参数在网站内的跳转不会丢失。")]),e._v(" "),r("h1",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/HTTP_referer",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wikipedia: HTTP Referer"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://portswigger.net/kb/issues/00500400_cross-domain-referer-leakage",target:"_blank",rel:"noopener noreferrer"}},[e._v("Portswigger: cross-domain-referer-leakage"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://www.w3.org/TR/referrer-policy/",target:"_blank",rel:"noopener noreferrer"}},[e._v("W3C: referer-policy"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/UTM_parameters",target:"_blank",rel:"noopener noreferrer"}},[e._v("Wikipedia: UTM paremeters"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=s.exports}}]);